1. Выравнивание поворота изображения (deskewing) через cv2 или tesseract,
2. NER через deeppavlov аналогично natasha, но нужно поработать с выводом, а после уже по тому же алгоритму,
3. Object detection task train yolo model
4. Попробовать recognition с tessdata best


--Решение 5 задания:
Отдельная обработка запроса в web_service.py:
    Аналогично другим, извлекает json из запроса,
    Формат запроса:
        {
            "filename": name of the document to be recognized,
            "file_b64": encoded document in base64
        }.
    Извлеченный json отправляется в отдельный файл обработки общего запроса, который в utils(аналогично ocr_requests_processing и др.)
    этот файл возвращает готовый response для возвращения функцией обработки запроса в веб-сервисе,

    Внутри этого файла происходит:
        (В main функции последовательный вызов следующих шагов)
        1. Подготовка данных(в виде отдельных функций):
            1.1. сохранение документа в его собственную папку в uploaded_data
            1.2. деление tif изображения на отдельные страницы и их сохранение в ту же папку в uploaded_data
        2. Извлечение текста:
            2.1. передача списка изображений или сразу tif в модуль распознавания из modules и получение данных по тексту
        3. Object detection:
            3.1. передача списка изображений или сразу tif в модуль извлечения объектов из modules и получение данных по объектам
        4. Классификация страниц
            4.1. передача списка изображений или сразу tif в модуль классификации из modules и получение данных о страницах
        5. Передача первой страницы из предыдущего шага в модуль извлечения фактов
        6. Формирование ответа отдельной функцией из полученных данных из предыдущих шагов
